Directory of Service (DOS)
1. Which peers are online ?
2. List of images per client (downsampled, name of the images unique per client)
3. Owners send access rights updates to DOS in case viewers are offline. The DOS should enforce these updates on the viewers once they are back online (Push Notification).
4. Sign up / Sign in / Sign out --> new clients should send to DOS when they first sign up. The DOS should assign them a unique ID and send it to them. Old clients should sign in with their IDs.
The client should tell the DOS when it is online or offline. 
- Ctrl + c --> before killing the process must send to the DOS it is offline.
- 


client --> cargo run 127.0.0.1:8080 (client port for client-to-client communication) 127.0.0.1:5001 (server port)
server --> cargo run 127.0.0.1:5001 (client port) 127.0.0.1:8000 (election port)


For a client-server architecture project in Rust. Implement a Directory of Service (DoS). Assume for know that it is implemented in one server only. The role of the DoS is as follows:
- Registering new clients: when a new client enters the system, it signs up (registers) through the DoS. The DOS should give it a unique ID. The client should save this ID (in a file) for later sign in in the system. This is because a certain client IP can host multiple clients.
- Signing in an already existing client: The client should sign in with its ID. The DoS should mark the client online. 
- Sign out a client: The client should ask the DoS to sign out. The DoS should mark the client offline.
- Store all the clients in the system: The DoS should store all the clients in the system including their (status: online/offline, Client IP, Client ID, The Images they have downsample). This is because each client possess some images. Each image include (ImageID (unique), Image Data). The image should be downsample in order not to waste storage.
Implement this in Rust. Use tokio library or TCP stream for communication if necessary. Give comments and detailed explanation of the code.

Assume the following directory structure for the project: Client directory and Server directory. The Client directory has client.rs, middleware.rs, and main.rs source files. The Server directory has server.rs, middleware.rs, and main.rs source files. The client and the server are separate entities. The client.rs can only communicate with its middleware through tx and rx (from tokio:mpsc). Likewise, the server.rs can only communicate with its middleware through tx and rx (from tokio:mpsc). To send data from the client to the server, it must be sent to the client middleware first via tokio and then the client middleware send it to the server middleware via TCP stream. 

Adjust the code to do the following:
- The client.rs handles the client request whether to register, sign in, sign out, or list all the DoS content. 
- The client middleware should have this request via tokio, and send the request to the server middleware via TCP stream.
- The server middleware should have the DoS as well as all functionalities of register, sign in, sign out, and list. It should listen to the request via the TCP stream, and handles the request accordingly. If data are to be sent back to the client. It should be sent back to the client middleware first, and then to the client.


main branch or stokio branch --> resize image for low resolution
=============================================
1. Handle all the requests with the DOSs